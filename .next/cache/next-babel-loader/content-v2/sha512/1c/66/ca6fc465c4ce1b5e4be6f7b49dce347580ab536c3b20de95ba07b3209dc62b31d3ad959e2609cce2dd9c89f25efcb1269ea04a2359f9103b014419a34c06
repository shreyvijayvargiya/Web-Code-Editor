{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { treeData } from \"utils/config/tree\";\nconst initialState = {\n  activeFiles: [],\n  activeFile: null,\n  initialRepoTree: treeData\n};\nconst repoSlice = createSlice({\n  initialState,\n  name: \"repoTree\",\n  reducers: {\n    addActiveFiles: (state, action) => {\n      console.log(action.payload, \"payload\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeFiles: action.payload\n      });\n    },\n    addActiveFile: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        activeFile: action.payload\n      });\n    }\n  }\n});\nexport const {\n  addActiveFiles,\n  addActiveFile\n} = repoSlice.actions;\nexport const reducer = repoSlice.reducer;","map":{"version":3,"sources":["/Users/shreyvijayvargiya/Desktop/Project/Web-Code-Editor/redux/slice/index.js"],"names":["createSlice","treeData","initialState","activeFiles","activeFile","initialRepoTree","repoSlice","name","reducers","addActiveFiles","state","action","console","log","payload","addActiveFile","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,WAAW,EAAE,EADO;AAEpBC,EAAAA,UAAU,EAAE,IAFQ;AAGnBC,EAAAA,eAAe,EAAEJ;AAHE,CAArB;AAMA,MAAMK,SAAS,GAAGN,WAAW,CAAC;AAC7BE,EAAAA,YAD6B;AAE7BK,EAAAA,IAAI,EAAE,UAFuB;AAG7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAnB,EAA4B,SAA5B;AACA,6CACIJ,KADJ;AAECP,QAAAA,WAAW,EAAEQ,MAAM,CAACG;AAFrB;AAIA,KAPQ;AAQTC,IAAAA,aAAa,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACjC,6CACID,KADJ;AAECN,QAAAA,UAAU,EAAEO,MAAM,CAACG;AAFpB;AAIA;AAbQ;AAHmB,CAAD,CAA7B;AAoBA,OAAO,MAAM;AAAEL,EAAAA,cAAF;AAAkBM,EAAAA;AAAlB,IAAoCT,SAAS,CAACU,OAApD;AACP,OAAO,MAAMC,OAAO,GAAGX,SAAS,CAACW,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { treeData } from \"utils/config/tree\";\n\nconst initialState = {\n\tactiveFiles: [],\n\tactiveFile: null,\n  initialRepoTree: treeData\n};\n\nconst repoSlice = createSlice({\n\tinitialState,\n\tname: \"repoTree\",\n\treducers: {\n\t\taddActiveFiles: (state, action) => {\n\t\t\tconsole.log(action.payload, \"payload\");\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactiveFiles: action.payload\n\t\t\t};\n\t\t},\n\t\taddActiveFile: (state, action) => {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tactiveFile: action.payload\n\t\t\t}\n\t\t}\n\t},\n});\n\nexport const { addActiveFiles, addActiveFile } = repoSlice.actions;\nexport const reducer = repoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}